version: '3'
services:
  # Load balancer
  # Edit subdomains in windows hosts file:
  # (C:\Windows\System32\Drivers\etc\hosts)
  # Example: 
  # 127.0.0.1       traefik.localhost
  traefik:
    container_name: traefik
    image: traefik:1.7-alpine
    restart: always
    labels:
      - traefik.port=8080
      - traefik.frontend.rule=Host:traefik.${SERVER_DOMAIN}
    command: --web --logLevel=DEBUG --docker 
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - core

  ptraefik:
    container_name: ptraefik
    image: public-traefik
    build: ./core-apps/traefik/
    restart: always
    ports:
      - 80:80
      - 443:443
    labels:
      - traefik.port=8080
      - traefik.frontend.rule=Host:ptraefik.${SERVER_DOMAIN}
    command: --web --logLevel=DEBUG --configfile=/toml/traefik-public.toml --docker.exposedbydefault=false
    volumes:
      - traefik:/config
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - core

  oauth2proxy:
    container_name: oauth2proxy
    image: oauth2proxy
    build: ./core-apps/oauth2proxy/
    command: --cookie-secure=false --upstream="http://traefik:80" --http-address="0.0.0.0:4180" --redirect-url="https://portal.${SERVER_DOMAIN}/oauth2/callback" --authenticated-emails-file=/auth/emails --provider=gitlab --login-url="${SERVER_DOMAIN}/oauth/authorize" --redeem-url="${SERVER_DOMAIN}/oauth/token" --validate-url="${SERVER_DOMAIN}/api/v4/user"
    volumes:
      - oauth2proxy:/auth/
    labels:
      - traefik.enable=false
    environment:
      - OAUTH2_PROXY_COOKIE_SECRET=${OAUTH2_PROXY_COOKIE_SECRET}
      - OAUTH2_PROXY_COOKIE_DOMAIN=${OAUTH2_PROXY_COOKIE_DOMAIN}
      - OAUTH2_PROXY_CLIENT_ID=${OAUTH2_PROXY_CLIENT_ID}
      - OAUTH2_PROXY_CLIENT_SECRET=${OAUTH2_PROXY_CLIENT_SECRET}
    restart: always
    networks:
      - core

  # Docker management gui
  portainer:
    container_name: portainer
    image: portainer/portainer
    restart: always
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
     - portainer:/data
    command: --no-auth
    labels:
      - traefik.port=9000
      - traefik.frontend.rule=Host:portainer.${SERVER_DOMAIN}
    networks:
      - core

  # Repository manager (used for Docker registry)
  nexus:
    container_name: nexus
    image: sonatype/nexus3
    restart: always
    volumes:
      - nexus:/nexus-data:rw
    labels:
      - traefik.enable=true
      - traefik.nexus.port=8081
      - traefik.nexus.frontend.rule=Host:nexus.${SERVER_DOMAIN}
      - traefik.docker.port=9000
      - traefik.docker.frontend.rule=Host:docker.${SERVER_DOMAIN}
    networks:
      - core

  # Git repo
#  gogs:
#    container_name: gogs
#    image: gogs/gogs
#    restart: always
#    volumes:
#      - gogs_ssh:/data/ssh/
#      - gogs:/data
#    labels:
#      - traefik.enable=true
#      - traefik.port=3000
#      - traefik.frontend.rule=Host:gogs.${SERVER_DOMAIN}
#      - traefik.frontend.passHostHeader=false
#    environment:
#      - ENABLE_REVERSE_PROXY_AUTHENTICATION = false 
#      - ENABLE_REVERSE_PROXY_AUTO_REGISTRATION = false
#    networks:
#      - core

  # gitlab:
  #   container_name: gitlab
  #   image: gitlab/gitlab-ce:latest
  #   restart: always
  #   env_file: ./gitlab.env
  #   volumes:
  #     - gitlab:/home/git/data:Z
  #   labels:
  #     - traefik.enable=true
  #     - traefik.nexus.port=80
  #     - traefik.frontend.rule=Host:gitlab.${SERVER_DOMAIN}
  #     - traefik.docker.network=core
  #   networks:
  #     - core
  #     - gitlab
  
  # redis:
  #   restart: always
  #   image: redis:latest
  #   command:
  #     - --loglevel warning
  #   volumes:
  #     - gitlab_redis:/var/lib/redis:Z
  #   networks:
  #     - gitlab

  # postgresql:
  #   restart: always
  #   image: postgres:10.5
  #   volumes:
  #     - gitlab_postgres:/var/lib/postgresql:Z
  #   environment:
  #     - DB_USER=gitlab
  #     - DB_PASS=password
  #     - DB_NAME=gitlabhq_production
  #     - DB_EXTENSION=pg_trgm
  #   networks:
  #     - gitlab

  # Build server
  drone-server:
    container_name: drone-server
    image: drone/drone:0.8.6
    restart: always
    volumes:
      - drone:/var/lib/drone/
    labels:
      - traefik.enable=true
      - traefik.port=8000
      - traefik.frontend.rule=Host:drone.${SERVER_DOMAIN}
    environment:
      - DRONE_HOST=https://drone.${SERVER_DOMAIN}
      - DRONE_GOGS=true
      - DRONE_GOGS_URL=https://gogs.${SERVER_DOMAIN}
      - DRONE_GOGS_PRIVATE_MODE=true
      - GOGS_PRIVATE_MODE=true
      - DRONE_GOGS_SKIP_VERIFY=true
      - DRONE_OPEN=false
      - DRONE_NETWORK=core
      - DRONE_ADMIN=${DRONE_ADMIN}
    networks:
      - core

  gitlab:
    container_name: gitlab
    image: gitlab/gitlab-ce:latest
    restart: always
    volumes:
      - gitlab_config:/etc/gitlab:Z
      - gitlab_logs:/var/log/gitlab:Z
      - gitlab_data:/var/opt/gitlab:Z
    labels:
      - traefik.enable=true
      - traefik.port=80
      - traefik.frontend.rule=Host:gitlab.${SERVER_DOMAIN}
    networks:
      - core

  #Build agent
  drone-agent:
    container_name: drone-agent
    image: drone/agent:0.8.6
    command: agent
    restart: always
    depends_on: [ drone-server  ]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_SERVER=drone-server:9000
    labels:      
      - traefik.enable=false
    networks:
      - core

  # Auto update docker container to newest image
  watchtower:
    container_name: watchtower
    image: v2tec/watchtower
    restart: always
    labels:
      - traefik.enable=false
    command: --interval 20 --label-enable
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKER_CONFIG}:/config.json
    networks:
      - core

  # Portal gui
  portal:
    container_name: portal
    image: lowet84/traefik-portal
    restart: always
    labels:
      - traefik.port=3000
      - traefik.frontend.rule=Host:portal.${SERVER_DOMAIN}
    environment:
      - TRAEFIK=http://traefik:8080
    networks:
      - core

volumes:
  gogs_ssh:
  drone:
  gogs:
  nexus:
  portainer:
  traefik:
  oauth2proxy:
  gitlab_config:
  gitlab_logs:
  gitlab_data:

# Create a network called "core" before running "docker-compose up"
networks:
  core:
    external: true
  # gitlab:

# Create a file called .env and add the follong information
# SERVER_DOMAIN=<your domain>
# VOLUME_PATH=<path where you want to store volumes>
# DRONE_ADMIN=<usernames of drone admins>
# DOCKER_CONFIG=<path to docker config.json file>

